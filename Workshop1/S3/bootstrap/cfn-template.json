{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
  },
  "Resources": {
    "IamLambdaExecutionRoleBasic": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Sub": [
            "ws-lambda-at-edge-basic-${UniqueId}",
            {
              "UniqueId": {
                "Fn::Select": [ 0, { "Fn::Split": [ "-", { "Fn::Select": [ 2, {
                "Fn::Split": [ "/", { "Ref": "AWS::StackId" } ] } ] } ] } ]
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
        ],
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com",
                  "edgelambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "IamLambdaExecutionRoleReadOnly": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Sub": [
            "ws-lambda-at-edge-read-only-${UniqueId}",
            {
              "UniqueId": {
                "Fn::Select": [ 0, { "Fn::Split": [ "-", { "Fn::Select": [ 2, {
                "Fn::Split": [ "/", { "Ref": "AWS::StackId" } ] } ] } ] } ]
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess",
          "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
          "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
        ],
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com",
                  "edgelambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "IamLambdaExecutionRoleFullAccess": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Sub": [
            "ws-lambda-at-edge-full-access-${UniqueId}",
            {
              "UniqueId": {
                "Fn::Select": [ 0, { "Fn::Split": [ "-", { "Fn::Select": [ 2, {
                "Fn::Split": [ "/", { "Ref": "AWS::StackId" } ] } ] } ] } ]
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
        ],
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com",
                  "edgelambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "AlienCardsDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": {
          "Fn::Sub": [
            "AlienCards-${UniqueId}",
            {
              "UniqueId": {
                "Fn::Select": [ 0, { "Fn::Split": [ "-", { "Fn::Select": [ 2, {
                "Fn::Split": [ "/", { "Ref": "AWS::StackId" } ] } ] } ] } ]
              }
            }
          ]
        },
        "KeySchema": [
          {
            "AttributeName": "CardId",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "CardId",
            "AttributeType": "S"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      }
    },
    "AlienCardsS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Sub": [
            "alien-cards-${UniqueId}",
            {
              "UniqueId": {
                "Fn::Select": [ 0, { "Fn::Split": [ "-", { "Fn::Select": [ 2, {
                "Fn::Split": [ "/", { "Ref": "AWS::StackId" } ] } ] } ] } ]
              }
            }
          ]
        }
      }
    },
    "AlienCardsS3BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "DependsOn": [
        "AlienCardsS3Bucket"
      ],
      "Properties": {
        "Bucket": { "Ref": "AlienCardsS3Bucket" },
        "PolicyDocument": {
          "Id": "PolicyForCloudFrontPrivateContent",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${AlienCardsCloudFrontOAI}"
                }
              },
              "Action": "s3:GetObject",
              "Resource": {
                "Fn::Sub": [
                  "${AlienCardsS3BucketArn}/*",
                  {
                    "AlienCardsS3BucketArn": {
                      "Fn::GetAtt": [ "AlienCardsS3Bucket", "Arn" ]
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "AlienCardsCloudFrontOAI": {
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
      "Properties": {
        "CloudFrontOriginAccessIdentityConfig": {
          "Comment": {
            "Fn::Sub": [
              "OAI For Lambda@Edge Workshop ${UniqueId}",
              {
                "UniqueId": {
                  "Fn::Select": [ 0, { "Fn::Split": [ "-", { "Fn::Select": [ 2, {
                  "Fn::Split": [ "/", { "Ref": "AWS::StackId" } ] } ] } ] } ]
                }
              }
            ]
          }
        }
      }
    },
    "AlienCardsCloudFrontDistribution": {
      "Type": "AWS::CloudFront::Distribution",
      "DependsOn": [
        "AlienCardsS3Bucket",
        "AlienCardsCloudFrontOAI"
      ],
      "Properties": {
        "DistributionConfig": {
          "Comment": {
            "Fn::Sub": [
              "Lambda@Edge Workshop ${UniqueId}",
              {
                "UniqueId": {
                  "Fn::Select": [ 0, { "Fn::Split": [ "-", { "Fn::Select": [ 2, {
                  "Fn::Split": [ "/", { "Ref": "AWS::StackId" } ] } ] } ] } ]
                }
              }
            ]
          },
          "Origins": [
            {
              "Id": "AlienCardsS3BucketOriginId",
              "DomainName": {
                "Fn::GetAtt": [ "AlienCardsS3Bucket", "RegionalDomainName" ]
              },
              "S3OriginConfig": {
                "OriginAccessIdentity": {
                  "Fn::Sub": "origin-access-identity/cloudfront/${AlienCardsCloudFrontOAI}"
                }
              }
            }
          ],
          "DefaultRootObject": "index.html",
          "DefaultCacheBehavior": {
            "TargetOriginId": "AlienCardsS3BucketOriginId",
            "ViewerProtocolPolicy": "allow-all",
            "ForwardedValues": {
              "Headers": [],
              "Cookies": {
                "Forward": "none"
              },
              "QueryString": false,
              "QueryStringCacheKeys": []
            },
            "MinTTL": 0,
            "MaxTTL": 600,
            "DefaultTTL": 60
          },
          "ViewerCertificate": {
            "CloudFrontDefaultCertificate": true
          },
          "HttpVersion": "http2",
          "PriceClass": "PriceClass_All",
          "IPV6Enabled": true,
          "Enabled": true,
          "CustomErrorResponses": [
            { "ErrorCachingMinTTL": 5, "ErrorCode": 400 },
            { "ErrorCachingMinTTL": 5, "ErrorCode": 403 },
            { "ErrorCachingMinTTL": 5, "ErrorCode": 404 },
            { "ErrorCachingMinTTL": 5, "ErrorCode": 405 },
            { "ErrorCachingMinTTL": 5, "ErrorCode": 500 },
            { "ErrorCachingMinTTL": 5, "ErrorCode": 501 },
            { "ErrorCachingMinTTL": 5, "ErrorCode": 502 },
            { "ErrorCachingMinTTL": 5, "ErrorCode": 503 },
            { "ErrorCachingMinTTL": 5, "ErrorCode": 504 }
          ]
        }
      }
    },
    "BootstrapFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Runtime": "nodejs10.x",
        "Timeout": 60,
        "Role": {
          "Fn::GetAtt": [ "IamLambdaExecutionRoleFullAccess", "Arn" ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "const AWS = require('aws-sdk');\n",
                "const s3 = new AWS.S3({region: 'us-east-1'});\n",
                "const ddb = new AWS.DynamoDB({region: 'us-east-1', apiVersion: '2012-10-08'});\n",
                "const cfn = require('cfn-response');\n",
                "\n",
                "const {promisify} = require('util');\n",
                "const cfnSend = promisify(cfn.send);\n",
                "\n",
                "exports.handler = async (event, context) => {\n",
                "    console.log('event: ' + JSON.stringify(event, null, 2));\n",
                "    console.log('context: ' + JSON.stringify(context, null, 2));\n",
                "    try {\n",
                "        if (event.RequestType == 'Create' || event.RequestType == 'Update') {\n",
                "            await Promise.all([bootstrapS3(event), bootstrapDDB(event)]);\n",
                "        } else if (event.RequestType == 'Delete') {\n",
                "            await Promise.all([cleanupS3(event)]);\n",
                "        }\n",
                "        await cfnSend(event, context, cfn.SUCCESS);\n",
                "    } catch (err) {\n",
                "        console.log(err);\n",
                "        await cfnSend(event, context, cfn.FAILED, err);\n",
                "    }\n",
                "};\n",
                "\n",
                "async function bootstrapS3(event) {\n",
                "    const srcBucket = event.ResourceProperties.SrcS3Bucket;\n",
                "    const dstBucket = event.ResourceProperties.DstS3Bucket;\n",
                "    let objects = await s3.listObjects({ Bucket: srcBucket }).promise();\n",
                "    await Promise.all(\n",
                "        objects.Contents\n",
                "        .map(obj => { return obj.Key; })\n",
                "        .filter(key => { return !key.startsWith('bootstrap'); })\n",
                "        .map(async key => {\n",
                "            console.log(`getting ${key}`);\n",
                "            let data = await s3.getObject({\n",
                "                Bucket: srcBucket, Key: key\n",
                "            }).promise();\n",
                "            console.log(`copying ${data.ContentLength} bytes of ${key}`);\n",
                "            await s3.putObject({\n",
                "                Bucket: dstBucket, Key: key, \n",
                "                Body: data.Body, ContentType: data.ContentType\n",
                "            }).promise();\n",
                "        })\n",
                "    );\n",
                "}\n",
                "\n",
                "async function cleanupS3(event) {\n",
                "    const dstBucket = event.ResourceProperties.DstS3Bucket;\n",
                "    let objects = await s3.listObjects({ Bucket: dstBucket }).promise();\n",
                "    await Promise.all(\n",
                "        objects.Contents\n",
                "        .map(obj => { return obj.Key; })\n",
                "        .map(async key => {\n",
                "            console.log(`deleting ${key}`);\n",
                "            let data = await s3.deleteObject({\n",
                "                Bucket: dstBucket, Key: key\n",
                "            }).promise();\n",
                "        })\n",
                "    );\n",
                "}\n",
                "\n",
                "async function bootstrapDDB(event) {\n",
                "    const srcBucket = event.ResourceProperties.SrcS3Bucket;\n",
                "    const ddbTableName = event.ResourceProperties.DdbTableName;\n",
                "    let data = await s3.getObject({ \n",
                "        Bucket: srcBucket, Key: 'bootstrap/cards.json'\n",
                "    }).promise();\n",
                "    await Promise.all(\n",
                "        JSON.parse(data.Body)\n",
                "        .map(card => \n",
                "            ddb.putItem({\n",
                "                TableName: ddbTableName,\n",
                "                Item: { \n",
                "                    CardId: { 'S': card.CardId }, \n",
                "                    Description: { 'S': card.Description }, \n",
                "                    Likes: { 'N': '0' } \n",
                "                }\n",
                "            }).promise()\n",
                "        )\n",
                "    );\n",
                "}\n"
              ]
            ]
          }
        }
      }
    },
    "BootstrapCustomResource": {
      "Type": "Custom::BootstrapFunction",
      "DependsOn": [
        "AlienCardsS3Bucket",
        "AlienCardsDynamoDBTable"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [ "BootstrapFunction", "Arn" ]
        },
        "SrcS3Bucket": "ws-lambda-at-edge",
        "DstS3Bucket": { "Ref": "AlienCardsS3Bucket" },
        "DdbTableName": { "Ref": "AlienCardsDynamoDBTable" }
      }
    }
  }
}
